#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mpi.h"
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char *argv[]) {
	int my_rank;		// rank of process	
	int p;			// number of process	
	int source = 0;		// rank of sender	
	int des;		// rank of reciever	
	int tag = 0;		// tag for messages	
	int index = 0;
	int j,i,m;
	int totalSize;
	int blockSize;
//	int *array=(int*)malloc(totalSize*sizeof(int));
	MPI_Init( &argc , &argv );
	
	MPI_Status status;	/* return status for 	*/
				/* recieve		*/
	/* Start up MPI */
	/* Find out process rank */
	MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
	/* Find out number of process */
	MPI_Comm_size(MPI_COMM_WORLD, &p);

if(my_rank !=0){
	    int processSize;
		
	    MPI_Recv(&processSize, 1, MPI_INT, source, tag, MPI_COMM_WORLD, &status );
		int *processMassage=(int*)malloc(processSize * sizeof(int));
	
		MPI_Recv(processMassage, processSize , MPI_INT, source, tag, MPI_COMM_WORLD, &status );
		int max=processMassage[0];
		int pos;
		for(m=0;m<processSize;m++){
			if(processMassage[m]>=max){
			max=processMassage[m];
			pos=m;
		}
		
}
			MPI_Send( &max, 1, MPI_INT, source, tag, MPI_COMM_WORLD);
			MPI_Send( &pos, 1, MPI_INT, source, tag, MPI_COMM_WORLD);
			}
else{
	printf("Hello From Master Process \n");
	
	printf("Number of slave process is %d \n",p-1);
	//int totalSize;
	printf("please enter the size of the array  \n");
	scanf("%d",&totalSize);
	int *array=(int*)malloc(totalSize*sizeof(int));
	//int array[totalSize];
	printf("please enter array elements ....\n");
	for(i=0;i<totalSize;i++){
		scanf("%d",&array[i]);
	}
	blockSize=totalSize/(p-1);
	for( des = 1; des < p ; des++)
		{

		    if(des == p - 1){

			   blockSize = blockSize + ( totalSize % (p - 1));
			}

			MPI_Send( &blockSize, 1, MPI_INT, des, tag, MPI_COMM_WORLD);
			
			MPI_Send(array + index, blockSize, MPI_INT, des, tag, MPI_COMM_WORLD);
			index += blockSize;
		}
		printf("***********************************************\n");
		for(des=1;des<p;des++){
			int max;
			int pos;
		MPI_Recv(&max, 1 , MPI_INT, des, tag, MPI_COMM_WORLD, &status );
		MPI_Recv(&pos, 1 , MPI_INT, des, tag, MPI_COMM_WORLD, &status );
		printf("Hello from slave# %d Max number in my partition is %d and index is %d.\n",des,max,pos);
		}
		int m=array[0];
		int p;
		for(j=0;j<totalSize;j++){
			if(array[j]>=m){
			m=array[j];
			p=j;}
		}
	printf("Master process announce the final max which is %d and its index is %d.Thanks for using our program",m,p);
}
	MPI_Finalize();

	return 0;
}
